// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/krafton-hq/redfox/pkg/apis/redfox/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VersionCountLister helps list VersionCounts.
// All objects returned here must be treated as read-only.
type VersionCountLister interface {
	// List lists all VersionCounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VersionCount, err error)
	// VersionCounts returns an object that can list and get VersionCounts.
	VersionCounts(namespace string) VersionCountNamespaceLister
	VersionCountListerExpansion
}

// versionCountLister implements the VersionCountLister interface.
type versionCountLister struct {
	indexer cache.Indexer
}

// NewVersionCountLister returns a new VersionCountLister.
func NewVersionCountLister(indexer cache.Indexer) VersionCountLister {
	return &versionCountLister{indexer: indexer}
}

// List lists all VersionCounts in the indexer.
func (s *versionCountLister) List(selector labels.Selector) (ret []*v1alpha1.VersionCount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VersionCount))
	})
	return ret, err
}

// VersionCounts returns an object that can list and get VersionCounts.
func (s *versionCountLister) VersionCounts(namespace string) VersionCountNamespaceLister {
	return versionCountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VersionCountNamespaceLister helps list and get VersionCounts.
// All objects returned here must be treated as read-only.
type VersionCountNamespaceLister interface {
	// List lists all VersionCounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VersionCount, err error)
	// Get retrieves the VersionCount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VersionCount, error)
	VersionCountNamespaceListerExpansion
}

// versionCountNamespaceLister implements the VersionCountNamespaceLister
// interface.
type versionCountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VersionCounts in the indexer for a given namespace.
func (s versionCountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VersionCount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VersionCount))
	})
	return ret, err
}

// Get retrieves the VersionCount from the indexer for a given namespace and name.
func (s versionCountNamespaceLister) Get(name string) (*v1alpha1.VersionCount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("versioncount"), name)
	}
	return obj.(*v1alpha1.VersionCount), nil
}
