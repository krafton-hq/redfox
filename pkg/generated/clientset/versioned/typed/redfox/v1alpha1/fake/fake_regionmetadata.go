// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/krafton-hq/redfox/pkg/apis/redfox/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRegionMetadatas implements RegionMetadataInterface
type FakeRegionMetadatas struct {
	Fake *FakeMetadataV1alpha1
	ns   string
}

var regionmetadatasResource = schema.GroupVersionResource{Group: "metadata.sbx-central.io", Version: "v1alpha1", Resource: "regionmetadatas"}

var regionmetadatasKind = schema.GroupVersionKind{Group: "metadata.sbx-central.io", Version: "v1alpha1", Kind: "RegionMetadata"}

// Get takes name of the regionMetadata, and returns the corresponding regionMetadata object, and an error if there is any.
func (c *FakeRegionMetadatas) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.RegionMetadata, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(regionmetadatasResource, c.ns, name), &v1alpha1.RegionMetadata{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RegionMetadata), err
}

// List takes label and field selectors, and returns the list of RegionMetadatas that match those selectors.
func (c *FakeRegionMetadatas) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.RegionMetadataList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(regionmetadatasResource, regionmetadatasKind, c.ns, opts), &v1alpha1.RegionMetadataList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.RegionMetadataList{ListMeta: obj.(*v1alpha1.RegionMetadataList).ListMeta}
	for _, item := range obj.(*v1alpha1.RegionMetadataList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested regionMetadatas.
func (c *FakeRegionMetadatas) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(regionmetadatasResource, c.ns, opts))

}

// Create takes the representation of a regionMetadata and creates it.  Returns the server's representation of the regionMetadata, and an error, if there is any.
func (c *FakeRegionMetadatas) Create(ctx context.Context, regionMetadata *v1alpha1.RegionMetadata, opts v1.CreateOptions) (result *v1alpha1.RegionMetadata, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(regionmetadatasResource, c.ns, regionMetadata), &v1alpha1.RegionMetadata{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RegionMetadata), err
}

// Update takes the representation of a regionMetadata and updates it. Returns the server's representation of the regionMetadata, and an error, if there is any.
func (c *FakeRegionMetadatas) Update(ctx context.Context, regionMetadata *v1alpha1.RegionMetadata, opts v1.UpdateOptions) (result *v1alpha1.RegionMetadata, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(regionmetadatasResource, c.ns, regionMetadata), &v1alpha1.RegionMetadata{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RegionMetadata), err
}

// Delete takes name of the regionMetadata and deletes it. Returns an error if one occurs.
func (c *FakeRegionMetadatas) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(regionmetadatasResource, c.ns, name, opts), &v1alpha1.RegionMetadata{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRegionMetadatas) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(regionmetadatasResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.RegionMetadataList{})
	return err
}

// Patch applies the patch and returns the patched regionMetadata.
func (c *FakeRegionMetadatas) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.RegionMetadata, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(regionmetadatasResource, c.ns, name, pt, data, subresources...), &v1alpha1.RegionMetadata{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RegionMetadata), err
}
